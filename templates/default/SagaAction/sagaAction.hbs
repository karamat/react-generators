function * {{camelCase sagaName}}Request (api, action) {
  {{#if isPromisified}}
  const { payload, resolve, reject } = action
  {{else}}
  const { payload } = action
  {{/if}}
  const response = yield call(api.{{camelCase reduxActionName}}, payload)
  if (response.status == 200) {
    const data = get(response, 'data.data')
    yield put(Actions.{{camelCase reduxActionName}}Success())
    {{#if isPromisified}}
    return resolve()
    {{/if}}
  } else if (response.status == 400) {
    const error = response.data.message;
    yield put(Actions.{{camelCase reduxActionName}}Failure(error))
    return reject(error)
  } else {
    let error = get(response, 'data.meta.message')
    if (response.problem === 'NETWORK_ERROR')
      error = 'Backend server is down.'
    yield put(Actions.{{camelCase reduxActionName}}Failure(error))
    {{#if isPromisified}}
    return reject(error)
    {{/if}}
  }
}

// ADD_SAGA_ACTION
